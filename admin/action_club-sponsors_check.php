<?php    include("../_includes/session_test.inc");    include("../_includes/_revolutionfc.inc");        if ($_SERVER['REQUEST_METHOD'] === 'POST') {        $element = $_POST['element'];                // Check if selected_sponsors is an array        if (isset($_POST['selected_sponsors']) && is_array($_POST['selected_sponsors'])) {            $selectedSponsors = $_POST['selected_sponsors'];                        // Start a database transaction for atomicity            $db->beginTransaction();                        try {                // Prepare SQL statements for insertion and deletion                $stmtInsert = $db->prepare('INSERT INTO SPONSORS_event (sponsor_event, sponsor_id) VALUES (?, ?)');                $stmtDelete = $db->prepare('DELETE FROM SPONSORS_event WHERE sponsor_event = ? AND sponsor_id = ?');                                // Get currently selected sponsors from the database                $stmtCurrent = $db->prepare('SELECT sponsor_id FROM SPONSORS_event WHERE sponsor_event = ?');                $stmtCurrent->execute([$element]);                $currentSponsors = $stmtCurrent->fetchAll(PDO::FETCH_COLUMN, 0);                                // Process each selected sponsor                foreach ($selectedSponsors as $sponsor) {                    // If the sponsor is selected and not in the database, insert it                    if (!in_array($sponsor, $currentSponsors)) {                        $stmtInsert->execute([$element, $sponsor]);                    }                }                                // Process each current sponsor                foreach ($currentSponsors as $sponsor) {                    // If the sponsor is not selected, delete it from the database                    if (!in_array($sponsor, $selectedSponsors)) {                        $stmtDelete->execute([$element, $sponsor]);                    }                }                                // Commit the transaction if everything is successful                $db->commit();                                // Close the prepared statements                $stmtInsert->closeCursor();                $stmtDelete->closeCursor();                $stmtCurrent->closeCursor();                                retour_erreur_content(93, 835, 't', $element);            } catch (PDOException $e) {                // Roll back the transaction if an error occurs                $db->rollBack();                retour_erreur_content(93, 836, 't', $element);            }        } else {            retour_erreur_content(93, 8, 't', $element);        }    }?>