<?php    require '../_includes/_revolutionfc.inc';    require '../vendor/autoload.php';        // Function to send a password reset email    function sendPasswordResetEmail($email, $resetToken)    {        global $db;                // Check if the email exists in the USERS table        $sql = "SELECT id_user, user_fn, user_ln FROM USERS WHERE email = :email";        $stmt = $db->prepare($sql);        $stmt->bindParam(':email', $email, PDO::PARAM_STR);        $stmt->execute();                if ($stmt->rowCount() === 1) {            $row = $stmt->fetch(PDO::FETCH_ASSOC);            $user_fn = $row['user_fn'];            $user_ln = $row['user_ln'];                                    // Create a PHPMailer instance            $mail = new PHPMailer\PHPMailer\PHPMailer();            $mail->SMTPDebug = 2;            $mail->Debugoutput = 'html'; // or 'echo' for plain text debugging                        $mail->IsSMTP();            $mail->SMTPAuth = true;            $mail->SMTPSecure = 'ssl';            $mail->Host = 'mail.chabertdesign.com'; // SMTP server            $mail->Port = 465; // SMTP port            $mail->Username = 'chabe642'; // SMTP username            $mail->Password = 'udh!exr6HED3yht8dbg'; // SMTP password (replace with your SMTP password)            $mail->setFrom('info@chabertdesign.com', 'Panel STM FC');            $mail->addAddress($email); // Recipient            $mail->Subject = 'Password Reset admin';            $mail->isHTML(true);                        // Email content with reset link            $resetLink = 'https://clients.chabertdesign.com/panel/reset-password.php?token=' . $resetToken;            $mail->Body = "Bonjour $user_fn $user_ln,<br><br>";            $mail->Body .= 'Click the following link to reset your password: <a href="' . $resetLink . '">Reset Password</a>';                                    if ($mail->send()) {                return true; // Email sent successfully            } else {                return false; // Email sending failed            }        } else {            return false; // Email not found in the database        }    }        // Implement the generateUniqueToken function    function generateUniqueToken($user_id)    {        global $db;        $token = bin2hex(random_bytes(32)); // Generate a random token                // Format the current date and time        $currentDateTime = date('Y-m-d H:i:s');                // Calculate the expiration date (e.g., 1 hour from the current time)        $expirationDateTime = date('Y-m-d H:i:s', strtotime('+1 hour'));                // Insert the token and associate it with the user's email in the database        $sql = "INSERT INTO password_reset_tokens (user_id, token, created_at, expires_at) VALUES (:user_id, :token, :created_at, :expires_at)";        $stmt = $db->prepare($sql);        $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);        $stmt->bindParam(':token', $token, PDO::PARAM_STR);        $stmt->bindParam(':created_at', $currentDateTime, PDO::PARAM_STR);        $stmt->bindParam(':expires_at', $expirationDateTime, PDO::PARAM_STR);        $stmt->execute();                return $token;    }            if (isset($_POST['email'])) {        $userEmail = $_POST['email'];                // Retrieve the user's ID based on the email        $sql = "SELECT id_user FROM USERS WHERE email = :email";        $stmt = $db->prepare($sql);        $stmt->bindParam(':email', $userEmail, PDO::PARAM_STR);        $stmt->execute();                if ($stmt->rowCount() === 1) {            $row = $stmt->fetch(PDO::FETCH_ASSOC);            $user_id = $row['id_user'];                        // Generate a unique token            $resetToken = generateUniqueToken($user_id);                        if ($resetToken) {                // Send the password reset email                if (sendPasswordResetEmail($userEmail, $resetToken)) {                    echo json_encode(['success' => true, 'message' => 'Password reset email sent successfully.']);                } else {                    echo json_encode(['success' => false, 'message' => 'Failed to send the password reset email. Please try again later.']);                }            } else {                // Failed to generate a token, return an error response                echo json_encode(['success' => false, 'message' => 'Failed to generate a token.']);            }                    } else {            // User not found with the given email, return an error response            echo json_encode(['success' => false, 'message' => 'User not found with the provided email.']);        }    } else {        // Email parameter is missing, return an error response        echo json_encode(['success' => false, 'message' => 'Email parameter is missing.']);    }?>